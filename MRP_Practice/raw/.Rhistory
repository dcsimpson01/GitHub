rm(list=ls(all=TRUE))
library("arm")
install.packages("arm")
?swd
?setwd
getwd()
setwd("/Users/dsimp/GitHub/MRP_Practice/raw")
#read in megapoll and attach
marriage.data <- read.dta("gay_marriage_megapoll.dta", convert.underscore = TRUE)
library("arm")
library("foreign")
setwd("/Users/dsimp/GitHub/MRP_Practice/raw")
#read in megapoll and attach
marriage.data <- read.dta("gay_marriage_megapoll.dta", convert.underscore = TRUE) # Converts variables names with underscores to periods
View(marriage.data)
?sum()
?summarize
?glimpse
head(marriage.data)
library("dplyr")
glimpse(marriage.data)
# Step 3: read in state-level dataset
Statelevel <- read.dta("state_level_update.dta",convert.underscore = TRUE)
View(Statelevel)
glimpse(Statelevel)
Statelevel <- Statelevel[order(Statelevel$sstate.initnum),] # Sort by numerica order of state's initials
# Step 4: read in Census data
Census <- read.dta("poststratification 2000.dta",convert.underscore = TRUE)
View(Census)
Census <- Census[order(Census$cstate),]
Census$cstate.initnum <-  match(Census$cstate, Statelevel$sstate)
View(Census)
tail(Census)
marriage.data$race.female <- (marriage.data$female *3) + marriage.data$race.wbh# from 1 for white males to 6 for hispanic females
marriage.data$age.edu.cat <- 4 * (marriage.data$age.cat -1) + marriage.data$edu.cat# from 1 for 18-29 with low edu to 16 for 65+ with high edu
marriage.data$p.evang.full <- Statelevel$p.evang[marriage.data$state.initnum]# proportion of evangelicals in respondent's state
marriage.data$p.mormon.full <-Statelevel$p.mormon[marriage.data$state.initnum]# proportion of mormon's in respondent's state
marriage.data$p.relig.full <- marriage.data$p.evang.full + marriage.data$p.mormon.full# combined evangelical + mormom proportions
marriage.data$p.kerry.full <- Statelevel$kerry.04[marriage.data$state.initnum]# kerry's % of 2-party vote in respondent's state in 2004
Census$crace.female <- (Census$cfemale *3) + Census$crace.WBH
Census$cage.edu.cat <- 4 * (Census$cage.cat -1) + Census$cedu.cat
Census$cp.evang.full<-  Statelevel$p.evang[Census$cstate.initnum]
Census$cp.mormon.full <- Statelevel$p.mormon[Census$cstate.initnum]
Census$cp.relig.full <- Census$cp.evang.full + Census$cp.mormon.full
Census$cp.kerry.full <-  Statelevel$kerry.04[Census$cstate.initnum]
?glmer
individual.model <- glmer(formula = yes.of.all ~ (1|race.female) + (1|age.cat)
+ (1|edu.cat) + (1|age.edu.cat) + (1|state) + (1|region) + (1|poll) +
+ p.kerry.full,data=marriage.data, family=binomial(link="logit"))
View(individual.model)
display(individual.model)
View(Census)
View(Statelevel)
View(marriage.data)
#examine random effects and standard errors for race-female
ranef(individual.model)$race.female
se.ranef(individual.model)$race.female
#create vector of state ranefs and then fill in missing ones
state.ranefs <- array(NA,c(51,1))
View(state.ranefs)
dimnames(state.ranefs) <- list(c(Statelevel$sstate),"effect")
for(i in Statelevel$sstate){
state.ranefs[i,1] <- ranef(individual.model)$state[i,1]
}
View(individual.model)
state.ranefs[,1][is.na(state.ranefs[,1])] <- 0 #set states with missing REs (b/c not in data) to zero (Since no repsonses from AK HI)
View(state.ranefs)
#create a prediction for each cell in Census data
cellpred <- invlogit(fixef(individual.model)["(Intercept)"]
+ranef(individual.model)$race.female[Census$crace.female,1]
+ranef(individual.model)$age.cat[Census$cage.cat,1]
+ranef(individual.model)$edu.cat[Census$cedu.cat,1]
+ranef(individual.model)$age.edu.cat[Census$cage.edu.cat,1]
+state.ranefs[Census$cstate,1]
+ranef(individual.model)$region[Census$cregion,1]
+(fixef(individual.model)["p.relig.full"] *Census$cp.relig.full)
+(fixef(individual.model)["p.kerry.full"] *Census$cp.kerry.full)
)
#weights the prediction by the freq of cell
cellpredweighted <- cellpred * Census$cpercent.state
glimpse(cellpred)
#calculates the percent within each state (weighted average of responses)
statepred <- 100* as.vector(tapply(cellpredweighted,Census$cstate,sum))
statepred
individual.model <- glmer(formula = yes.of.all ~ (1|race.female) + (1|age.cat)
+ (1|edu.cat) + (1|age.edu.cat) + (1|state) + (1|region) + (1|poll) + p.relig.full
+ p.kerry.full,data=marriage.data, family=binomial(link="logit"))
display(individual.model)
#examine random effects and standard errors for race-female
ranef(individual.model)$race.female
se.ranef(individual.model)$race.female
#create vector of state ranefs and then fill in missing ones
state.ranefs <- array(NA,c(51,1))
dimnames(state.ranefs) <- list(c(Statelevel$sstate),"effect")
for(i in Statelevel$sstate){
state.ranefs[i,1] <- ranef(individual.model)$state[i,1]
}
state.ranefs[,1][is.na(state.ranefs[,1])] <- 0 #set states with missing REs (b/c not in data) to zero (Since no repsonses from AK HI)
#create a prediction for each cell in Census data
cellpred <- invlogit(fixef(individual.model)["(Intercept)"]
+ranef(individual.model)$race.female[Census$crace.female,1]
+ranef(individual.model)$age.cat[Census$cage.cat,1]
+ranef(individual.model)$edu.cat[Census$cedu.cat,1]
+ranef(individual.model)$age.edu.cat[Census$cage.edu.cat,1]
+state.ranefs[Census$cstate,1]
+ranef(individual.model)$region[Census$cregion,1]
+(fixef(individual.model)["p.relig.full"] *Census$cp.relig.full)
+(fixef(individual.model)["p.kerry.full"] *Census$cp.kerry.full)
)
#weights the prediction by the freq of cell
cellpredweighted <- cellpred * Census$cpercent.state
#calculates the percent within each state (weighted average of responses)
statepred <- 100* as.vector(tapply(cellpredweighted,Census$cstate,sum))
statepred
View(Census)
View(individual.model)
View(Census)
View(Census)
?tapply
---
title: "Untitled"
author: "David Simpson"
date: "10/7/2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
?opts_chunk
knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("tidyr")
library("reshape2")
setwd("/Users/dsimp/GitHub/RushingData/analysis")
?read.csv
setwd("/Users/dsimp/GitHub/RushingData/raw")
read.csv("RushingData.csv")
data = read.csv("RushingData.csv")
setwd("/Users/dsimp/GitHub/RushingData/raw")
data = read.csv("RushingData.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/dsimp/GitHub/RushingData/analysis")
rm(list=ls(all=TRUE))
library("ggplot2")
library("tidyr")
library("reshape2")
library("foreign")
setwd("/Users/dsimp/GitHub/RushingData/raw")
data = read.csv("RushingData.csv")
pwd
psd()
pwd()
wd()
getwd()
qplot(RUSH, RUSH.YDS, data = data, geom = "jitter")
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
qplot(RUSH, RUSH.YDS, data = data, geom = "jitter")
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
qplot(RUSH, RUSH.YDS, data = data, geom = "jitter")
ggplot(data, aes(RUSH,RUSH.YDS,col=factor(POSITION)))+
geom_point()
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
qplot(RUSH, RUSH.YDS, data = data, geom = "jitter")
ggplot(data, aes(RUSH,RUSH.YDS,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards", Title = "Rushing Attempts and Yard by Position")
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
qplot(RUSH, RUSH.YDS, data = data, geom = "jitter")
ggplot(data, aes(RUSH,RUSH.YDS,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards", title = "Rushing Attempts and Yard by Position", color="Position")
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
ggplot(data, aes(RUSH,RUSH.YDS,col=factor(POSITION),size=RUSH.TD))+
geom_point()+
labs(x ="Attempts", y= "Yards", title = "Rushing Attempts and Yard by Position", color="Position")
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
ggplot(data, aes(RUSH,RUSH.YDS,col=factor(POSITION),size=RUSH.TD))+
geom_point()+
labs(x ="Attempts", y= "Yards", title = "Rushing Attempts and Yard by Position", color="Position")+
stat_smooth(method=lm)
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
ggplot(data, aes(RUSH,RUSH.YDS,col=factor(POSITION),size=RUSH.TD))+
geom_point()+
labs(x ="Attempts", y= "Yards", title = "Rushing Attempts and Yard by Position", color="Position") #+
#stat_smooth(method=lm)
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
ggplot(data, aes(RUSH.YDS,size=RUSH.TD,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards", title = "Rushing Attempts and Yard by Position", color="Position") #+
ggplot(data, aes(RUSH.YDS,RUSH.TD,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards", title = "Rushing Attempts and Yard by Position", color="Position") #+
#stat_smooth(method=lm)
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
ggplot(data, aes(RUSH.YDS,RUSH.TD,col=factor(POSITION)))+
geom_point()+
labs(x ="Yards", y= "Touch Downs", title = "Rushing Attempts and Yard by Position", color="Position") #+
#stat_smooth(method=lm)
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
ggplot(data, aes(RUSH,RUSH.TD,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Touch Downs", title = "Rushing Attempts and Yard by Position", color="Position") #+
#stat_smooth(method=lm)
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
ggplot(data, aes(RUSH,RUSH.YDS,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards", title = "Rushing Attempts and Yard by Position", color="Position") #+
#stat_smooth(method=lm)
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
ggplot(data, aes(RUSH,RUSH.TD,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Touch Downs", title = "Rushing Attempts and Yard by Position", color="Position") #+
#stat_smooth(method=lm)
#ggplot(data, aes(factor(cyl), wt, col = factor(am))) +
#  geom_point(position = position_jitter(0.2,0))
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/dsimp/GitHub/RushingData/analysis")
ggplot(data, aes(RUSH,RUSH.YDS,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards",
title = "Rushing Attempts and Yards by Position", color="Position")
ggplot(data, aes(RUSH.YDS/RUSH,RUSH.TD,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards",
title = "Rushing Attempts and Yards by Position", color="Position")
ggplot(data, aes(RUSH.YDS/RUSH,RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=RUSH.YDS/RUSH,y=RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(y=RUSH.YDS/RUSH,x=RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=RUSH.TD,y=RUSH.YDS/RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="TD", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=G,y=RUSH.YDS/RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="TD", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=G,y=RUSH.YDS/RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="G", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=G,y=RUSH.YDS/RUSH,col=factor(POSITION)))+
geom_point(position_jitter(0.2,0))+
labs(x ="G", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=G,y=RUSH.YDS/RUSH,col=factor(POSITION)))+
geom_point(position_jitter())+
labs(x ="G", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=G,y=RUSH.YDS/RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="G", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=G,y=RUSH.YDS/RUSH,col=factor(POSITION),position_jitter()))+
geom_point()+
labs(x ="G", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=G,y=RUSH.YDS/RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="G", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=RUSH.YDS/G,y=RUSH.YDS/RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="G", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=RUSH.YDS/G,y=RUSH.YDS/RUSH,col=factor(POSITION)))+
geom_point()+
labs(x ="Yards per Game", y= "Yards Per Carry",
title = "Yards per Carry", color="Position")
ggplot(data, aes(x=RUSH,y=RUSH.YDS/G,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards Per Carry",
title = "Yards per Carry vs Yards per Game", color="Position")
ggplot(data, aes(x=RUSH,y=RUSH.YDS/G,col=factor(POSITION)))+
geom_point()+
labs(x ="Attempts", y= "Yards per Game",
title = "Yards per Game vs Attempts", color="Position")
