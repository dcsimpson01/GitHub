hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
ylim=c(0,0.3),
breaks=75)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
ylim=c(0,0.3),
breaks=50)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
ylim=c(0,0.3),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=15)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=50)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=152)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.7),
breaks=152)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,1),
breaks=152)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,1),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.5),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.5),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.4),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.3),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.35),
breaks=100)
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlim=c(0,20),
ylim=c(0,0.3),
xlab="Predicted Number of Vists",col="red")
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlim=c(0,15),
ylim=c(0,0.3),
xlab="Predicted Number of Vists",col="red")
summary(data2001$income)
x=seq(from=-42, to =240, by =1)
summary(poisson_a)
poi_co=poisson_a$coefficients
lambda_fc=exp(poi_co[1]+poi_co[2]+poi_co[3]+poi_co[4]+poi_co[5]*x)
prob_fc=1-ppois(0,lambda_fc)
plot(x,prob_fc,
main="Female Patient With Chronic Disease",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
plot(x,prob_fc,
main="Patient: Female, Chronic Disease, Private Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
plot(x,prob_fc,
main="Patient: Female, Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
plot(x,prob_fnc,
main="Patient: Female No Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
summary(poisson_a)
plot(x,prob_fnc,
main="Patient: Female, No Chronic, Pr. Insurance",
xlim=c(exp(-42),exp(240)),
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
plot(x,prob_fnc,
main="Patient: Female, No Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
summary(poisson_a)
lambda_fncni=exp(poi_co[2]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fnc)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fncni=exp(poi_co[2]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fnc)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fncni=exp(poi_co[2]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fncni)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fncni=exp(poi_co[2]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fncni)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
summary(poisson_a)
lambda_fncni=exp(poi_co[1]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fncni)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fcni=exp(poi_co[1]+poi_co[3]+poi_co[4]+poi_co[5]*x)
prob_fcni=1-ppois(0,lambda_fc)
plot(x,prob_fcni,
main="Patient: Female, Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fcni=exp(poi_co[1]+poi_co[3]+poi_co[4]+poi_co[5]*x)
prob_fcni=1-ppois(0,lambda_fc)
plot(x,prob_fcni,
main="Patient: Female, Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fncni=exp(poi_co[1]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fncni)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
quant2 = rq(log(wage)~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
# Load AER CPS 1985 Data
data("CPS1985",package="AER")
# Load liberary for quantile regression
library(quantreg)
##### Data Summary #####
summary(CPS1985)
plot(ecdf(CPS1985$wage),
main="CDF Wages",
xlab="Wage $/hr",
ylab="CDF")
plot(ecdf(CPS1985$education),
main="CDF Education",
xlab="Years of Education",
ylab="CDF")
plot(ecdf(CPS1985$experience),
main="CDF Experience",
xlab="Years of Experience",
ylab="CDF")
model1= lm(log(wage) ~ education + experience, data=CPS1985)
summary(model1)
vcovHC(model1)
coeftest(model1,vcov.=vcovHC)
quant1 = rq(log(wage)~education + experience, data = CPS1985, tau=.5)
summary(quant1)
quant2 = rq(log(wage)~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(wage~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(log(wage)~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(logwage~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(logwage~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(wage~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(log(wage)~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
tt=[-1,-6]
t=cbind(-1,-6)
t*t''
tt'
asdf
รง
tt=[-1,-6]
stop()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
library(gmm)
install.packages(gmm)
upgrade.packages(checkBuilt = TRUE)
upgrade.packages(checkBuilt = TRUE)
.libPaths()
upgrade.packages(checkBuilt = TRUE)
library(zoo)
install.packages("zoo")
install.packages(gmm)
gmm
install.packages(c("cluster", "curl", "lattice", "survival"))
library(gmm)
install.packages("gmm")
library("gmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("AER")
library("IRdisplay", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("AER", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("IRkernel")
IRkernel::installspec(user=FALSE)
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("namespace")
library("namespace", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
library("IRdisplay", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("repr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("evaluate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("crayon", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("pbdZMQ", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("uuid", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("digest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github('IRkernel/IRkernel')
library("pbdZMQ", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github('IRkernel/IRkernel')
install.packages("xcrun")
update(xcrun)
update('xcrun')
library("git2r", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("xcrun")
devtools::install_github('IRkernel/IRkernel')
library("pbdZMQ", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
xcode-select --install
AER
library(AER)
install.packages("xcrun")
IRkernel::installspec()
install.packages("haven")
library("haven", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
rm(list = ls())
rm(list=ls())
wd
pwd
getwd
getwd()
setwd("/Users/dsimp/GitHub/BmoreRev/analysis") # Set Working Directory
getwd()
data = read.csv("RevData.csv")
# Libraries
library("ggplot2")
library("tidyr")
library("reshape2")
library("dplyr") # view data better
library("foreign") # Read STATA files
library("haven") # Needed to read STATA files
library("gmodels") # will allow you to use CrossTable() to do cross tabs
# Analysis
setwd("/Users/dsimp/GitHub/BmoreRev/data")
data = read.csv("RevData.csv")
View(data)
head(data)
data = data[2:44]
View(data)
year = c(1978:2017)
realprop = data[4:43]
View(realprop)
rm(realprop)
realprop = data[4:43,1]
realprop = data[1,4:43]
View(realprop)
set = as.matrix(year,realprop)
View(set)
set = as.matrix(cbind(year,realprop)
set = as.matrix(cbind(year,realprop))
year = as.matrix(c(1978:2017))
set = as.matrix(year,realprop)
set = as.matrix(year,realprop)
set = as.matrix(cbind(year,realprop))
View(set)
realprop = data[1,4:43]
View(realprop)
View(set)
realprop = c(data[1,4:43])
set = as.matrix(cbind(year,realprop))
View(set)
?rep()
length(1978:2017)
2017-1978
?as.matrix()
n = 4 # n = number of variables
output = as.matrix(rep(0,n*legnth(1978:2017),legnth(1978:2017),n)
output = as.matrix(rep(0,n*legnth(1978:2017),legnth(1978:2017),n))
n*legnth(1978:2017)
output = as.matrix(rep(0,n*length(1978:2017),length(1978:2017),n))
output
output = as.matrix(rep(0,n*length(1978:2017),length(1978:2017),n))
View(output)
output = as.matrix(rep(0,n*length(1978:2017)),length(1978:2017),n))
output = as.matrix(rep(0,n*length(1978:2017)),length(1978:2017),n)
output
output = as.matrix(rep(0,n*length(1978:2017)),length(1978:2017),n)
output
output = as.df(rep(0,n*length(1978:2017)),length(1978:2017),n)
output = as.data.frame( as.matrix(rep(0,n*length(1978:2017)),length(1978:2017),n))
output
View(output)
test = as.matrix(rep(0,6),2,3)
print(test)
test = as.matrix(c(rep(0,6)),2,3)
print(test)
?as.matrix
test = as.matrix(c(5,6,7,7),2,2)
print(test)
test = as.matrix(c(5,6,7,7),nrow = 2,2)
print(test)
test = as.matrix(c(5,6,7,7),nrow = 2,ncol=2)
print(test)
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
test = as.matrix(c(5,6,7,7),nrow = 2,ncol=2, byrow = TRUE)
print(test)
test = matrix(c(5,6,7,7),nrow = 2,ncol=2, byrow = TRUE)
print(test)
output = as.data.frame(matrix(rep(0,n*length(1978:2017)),length(1978:2017),n))
output
test = as.matrix(c(rep(0,6)),2,3)
print(test)
\documentclass{article}
% library(knitr)
library(knitr)
\documentclass{article}
\documentclass{article}
\usepackage{graphicx}
%% for inline R code: if the inline code is not correctly parsed, you will see a message
\newcommand{\rinline}[1]{SOMETHING WRONG WITH knitr}
%% begin.rcode setup, include=FALSE
% library(knitr)
% opts_chunk$set(fig.path='figure/latex-', cache.path='cache/latex-')
%% end.rcode
\begin{document}
Boring stuff as usual:
%% a chunk with default options
%% begin.rcode
% 1+1
% x=rnorm(5)
%% end.rcode
\documentclass{article}
\usepackage{graphicx}
%% for inline R code: if the inline code is not correctly parsed, you will see a message
\newcommand{\rinline}[1]{SOMETHING WRONG WITH knitr}
%% begin.rcode setup, include=FALSE
% library(knitr)
% opts_chunk$set(fig.path='figure/latex-', cache.path='cache/latex-')
%% end.rcode
\begin{document}
Boring stuff as usual:
%% a chunk with default options
%% begin.rcode
% 1+1
%
% x=rnorm(5)
%% end.rcode
For the cached chunk below, you will need to wait for 10 seconds for
the first time you compile this document, but it takes no time the
next time you run it again.
%% chunk options: cache this chunk
%% begin.rcode my-cache, cache=TRUE
% set.seed(123)
% x = runif(10)
% sd(x)  # standard deviation
%
% Sys.sleep(10) # test cache
%% end.rcode
Now we know the first element of x is \rinline{x[1]}. And we also know
the 26 letters are \rinline{LETTERS}. An expression that returns a
value of length 0 will be removed from the output, \rinline{x[1] =
2011; NULL} but it was indeed evaluated, e.g. now the first element
of x becomes \rinline{x[1]}.
How about figures? Let's use the Cairo PDF device (assumes R $\geq$
2.14.0).
%% begin.rcode cairo-scatter, dev='cairo_pdf', fig.width=5, fig.height=5, out.width='.8\\textwidth'
% plot(cars) # a scatter plot
%% end.rcode
Warnings, messages and errors are preserved by default.
%% begin.rcode
% sqrt(-1) # here is a warning!
% message('this is a message you should know')
% 1+'a'  # impossible
%% end.rcode
\end{document}
pwd
pwd()
getwd()
setwd("/Users/dsimp/GitHub/IowaMapCourse")
setwd("/Users/dsimp/GitHub/IowaMapCourse")
if (! file.exists("PEP_2017_PEPANNRES.zip")) {
download.file("http://www.stat.uiowa.edu/~luke/data/PEP_2017_PEPANNRES.zip",
"PEP_2017_PEPANNRES.zip")
unzip("PEP_2017_PEPANNRES.zip")
}
setwd("/Users/dsimp/GitHub/IowaMapCourse/Raw/CensusPop")
if (! file.exists("PEP_2017_PEPANNRES.zip")) {
download.file("http://www.stat.uiowa.edu/~luke/data/PEP_2017_PEPANNRES.zip",
"PEP_2017_PEPANNRES.zip")
unzip("PEP_2017_PEPANNRES.zip")
}
pep2017 <- read.csv("PEP_2017_PEPANNRES_with_ann.csv", stringsAsFactors = FALSE)
rm(list=ls())
# Libraries
library("ggplot2")
library("tidyr")
library("reshape2")
library("dplyr") # view data better
library("foreign") # Read STATA files
library("haven") # Needed to read STATA files
library("gmodels") # will allow you to use CrossTable() to do cross tabs
head(pep2017)
pep2017 <- read.csv("PEP_2017_PEPANNRES_with_ann.csv", stringsAsFactors = FALSE)
head(pep2017)
glimpse(pep2017)
?grepl
grepl(", Iowa", GEO.display.label)
grepl(", Iowa", GEO.display.label)
grepl(", Iowa", GEO.display.label)
head(filter(pep2017, grepl(", Iowa", GEO.display.label)))
pep2017[1803,]
pep2017[1803,]
filter(pep2017, GEO.id2 ==19141)
?filter
?filter()
# Safer to work with FIPS Councty Code
library(maps)
install.packages("maps")
# Safer to work with FIPS Councty Code
library(maps)
head(county.fips)
cfp = left_join(county.fips, select(pep2017, pop=respop72017, fips = GEO.id2), "fips")
View(cfp)
head(cfp)
?sub
cfp = mutate(cfp, state = sub(",.*", "", polyname))
usa <- map("state", fill = TRUE, plot = FALSE)
plot(usa$x, usa$y, type = "n")
polygon(usa$x, usa$y)
