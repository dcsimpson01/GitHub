xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(exp(predict.glm(poisson_a)),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
test5=predict.glm(poisson_a),
plot(density(predict.glm(poisson_a,type="response",se.fit=TRUE)),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response",se.fit=FALSE)),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response"),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="Response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a, type="Response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response"),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a, type="response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response"),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue"))
plot(density(predict.glm(poisson_a,
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a)),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(exp(predict.glm(poisson_a)),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(exp(predict.glm(poisson_a))),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(exp(predict.glm(poisson_a))),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(exp(predict.glm(poisson_a))),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlab="Predicted Number of Vists",col="red")
plot(density(predict.glm(negbino_c)*exp(predict.glm(negbino_c))),
main="Negative Binomial",
xlab="Predicted Number of Vists",col="red")
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlab="Predicted Number of Vists",col="red")
plot(density(predict(model_d, type="response")))
plot(density(predict.lm(model_d, type="response")))
plot(density(predict.lm(model_d)))
plotd(density(predict(probit_d,type="response")))
plot(density(predict(probit_d,type="response")))
plot(density(predict(probit_d,type="response")))
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlab="Predicted Number of Vists",col="red")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlab="Predicted Number of Vists",col="red")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response")),
main="Predicted Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlab="Predicted Number of Vists",col="red")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlim=c(0,15),
ylim=c(0,0.3).
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlim=c(0,15),
ylim=c(0,0.3),
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlim=c(0,15),
ylim=c(0,0.3),
xlab="Predicted Number of Vists",col="red")
plot(density(predict.glm(poisson_a,type="response")),
main="Poisson Distribution",
xlim=c(0,15),
ylim=c(0,0.3),
xlab="Predicted Number of Vists",col="blue")
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlim=c(0,15),
ylim=c(0,0.3),
xlab="Predicted Number of Vists",col="red")
hist_b=hist (data2001$docvis,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
breaks=30)
hist_b=hist (data2001$docvis,freq=TRUE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
breaks=30)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
breaks=30)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
breaks=40)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
breaks=50)
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
ylim=c(0,0.3),
breaks=50)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
ylim=c(0,0.3),
breaks=50)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
ylim=c(0,0.3),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
ylim=c(0,0.3),
breaks=75)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
ylim=c(0,0.3),
breaks=50)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,50),
ylim=c(0,0.3),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=15)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=50)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.3),
breaks=152)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,0.7),
breaks=152)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,1),
breaks=152)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,1),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.5),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.5),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.4),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.3),
breaks=100)
hist_b=hist (data2001$docvis,freq=FALSE,
main="Histogram for Doctor Visits",
xlab="Visits",
xlim=c(0,15),
ylim=c(0,.35),
breaks=100)
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlim=c(0,20),
ylim=c(0,0.3),
xlab="Predicted Number of Vists",col="red")
plot(density(predict.glm(negbino_c,type="response")),
main="Negative Binomial Distribution",
xlim=c(0,15),
ylim=c(0,0.3),
xlab="Predicted Number of Vists",col="red")
summary(data2001$income)
x=seq(from=-42, to =240, by =1)
summary(poisson_a)
poi_co=poisson_a$coefficients
lambda_fc=exp(poi_co[1]+poi_co[2]+poi_co[3]+poi_co[4]+poi_co[5]*x)
prob_fc=1-ppois(0,lambda_fc)
plot(x,prob_fc,
main="Female Patient With Chronic Disease",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
plot(x,prob_fc,
main="Patient: Female, Chronic Disease, Private Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
plot(x,prob_fc,
main="Patient: Female, Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
plot(x,prob_fnc,
main="Patient: Female No Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
summary(poisson_a)
plot(x,prob_fnc,
main="Patient: Female, No Chronic, Pr. Insurance",
xlim=c(exp(-42),exp(240)),
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
plot(x,prob_fnc,
main="Patient: Female, No Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
summary(poisson_a)
lambda_fncni=exp(poi_co[2]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fnc)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fncni=exp(poi_co[2]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fnc)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fncni=exp(poi_co[2]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fncni)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fncni=exp(poi_co[2]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fncni)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
summary(poisson_a)
lambda_fncni=exp(poi_co[1]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fncni)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fcni=exp(poi_co[1]+poi_co[3]+poi_co[4]+poi_co[5]*x)
prob_fcni=1-ppois(0,lambda_fc)
plot(x,prob_fcni,
main="Patient: Female, Chronic, Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fcni=exp(poi_co[1]+poi_co[3]+poi_co[4]+poi_co[5]*x)
prob_fcni=1-ppois(0,lambda_fc)
plot(x,prob_fcni,
main="Patient: Female, Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
lambda_fncni=exp(poi_co[1]+poi_co[4]+poi_co[5]*x)
prob_fncni=1-ppois(0,lambda_fncni)
plot(x,prob_fncni,
main="Patient: Female, No Chronic, No Pr. Insurance",
xlab="Log Income", type="s",
ylab= "Probability of at Least One Vist")
quant2 = rq(log(wage)~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
# Load AER CPS 1985 Data
data("CPS1985",package="AER")
# Load liberary for quantile regression
library(quantreg)
##### Data Summary #####
summary(CPS1985)
plot(ecdf(CPS1985$wage),
main="CDF Wages",
xlab="Wage $/hr",
ylab="CDF")
plot(ecdf(CPS1985$education),
main="CDF Education",
xlab="Years of Education",
ylab="CDF")
plot(ecdf(CPS1985$experience),
main="CDF Experience",
xlab="Years of Experience",
ylab="CDF")
model1= lm(log(wage) ~ education + experience, data=CPS1985)
summary(model1)
vcovHC(model1)
coeftest(model1,vcov.=vcovHC)
quant1 = rq(log(wage)~education + experience, data = CPS1985, tau=.5)
summary(quant1)
quant2 = rq(log(wage)~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(wage~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(log(wage)~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(logwage~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(logwage~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(wage~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
quant2 = rq(log(wage)~education+experience, data =CPS1985, tau=seq(0.05,.95, by=.05))
summary(quant2)
plot(quant2)
plot(summary(quant2))
tt=[-1,-6]
t=cbind(-1,-6)
t*t''
tt'
asdf
ç
tt=[-1,-6]
stop()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
library(gmm)
install.packages(gmm)
upgrade.packages(checkBuilt = TRUE)
upgrade.packages(checkBuilt = TRUE)
.libPaths()
upgrade.packages(checkBuilt = TRUE)
library(zoo)
install.packages("zoo")
install.packages(gmm)
gmm
install.packages(c("cluster", "curl", "lattice", "survival"))
library(gmm)
install.packages("gmm")
library("gmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("AER")
library("IRdisplay", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("AER", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("IRkernel")
IRkernel::installspec(user=FALSE)
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("namespace")
library("namespace", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
library("IRdisplay", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("repr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("evaluate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("crayon", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("pbdZMQ", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("uuid", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("digest", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github('IRkernel/IRkernel')
library("pbdZMQ", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::install_github('IRkernel/IRkernel')
install.packages("xcrun")
update(xcrun)
update('xcrun')
library("git2r", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("xcrun")
devtools::install_github('IRkernel/IRkernel')
library("pbdZMQ", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
xcode-select --install
AER
library(AER)
install.packages("xcrun")
IRkernel::installspec()
install.packages("haven")
library("haven", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
rm(list = ls())
rm(list=ls())
rm(list=ls()) # Clear enviornment
setwd("/Users/dsimp/GitHub/peg/data") # Set Working Directory
getwd()
# Libraries
library("ggplot2")
library("tidyr")
library("reshape2")
library("dplyr") # view data better
library("foreign") # Read STATA files
library("haven") # Needed to read STATA files
library("gmodels") # will allow you to use CrossTable() to do cross tabs
# ********************************************************************************
#                                 * Analyze *
# ********************************************************************************
data = read.csv("general92.csv")
data <- read_dta("~/GitHub/peg/raw/01_0_DataPrep/Census of Governments/DS2 Special District Governments (1992) ICPSR_04421/DS0002/04421-0002-Data.dta")
# ********************************************************************************
#                                 * BEGIN PREP*
# ********************************************************************************
rm(list=ls()) # Clear enviornment
data <- read_dta("~/GitHub/peg/raw/01_0_DataPrep/Census of Governments/DS2 Special District Governments (1992) ICPSR_04421/DS0002/04421-0002-Data.dta")
# To confirm that this data set is the general purpose data. Observe the third character in the
# GOVCODE. The only values are 1 (County Gov), 2 (Municipal Gov), 3 (Township Gov)
x = substring(data$GOVCODE,3,3)
unique(x)
View(data)
View(data)
View(data)
?write.csv
library("foreign") # Read STATA files
?write.dta
wrtie.dta(data,"general92.dta")
write.dta(data,"general92.dta")
data = read_dta("general92.dta")
View(data)
